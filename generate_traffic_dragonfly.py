# -*- coding: utf-8 -*-
"""
Created on Thu May 26 12:38:51 2022

@author: ramch
"""
import numpy as np
import math

def write_direct_traffic_file(filename,src,dest):
    with open(filename,'w') as fp:
        for s,d in zip(src,dest):
            fp.write(str(s)+" "+str(d)+"\n")
    fp.close()

    
def write_traffic_file(filename,src,dest,max_flow,grp_pairs):
    with open(filename,'w') as fp:
        for s,d in zip(src,dest):
            fp.write(str(s)+" "+str(d)+"\n")
    fp.close()
    filename=filename.split('/')
    with open(filename[0]+'/info_'+filename[1],'w') as fp:
        fp.write('max_flow='+str(max_flow)+"\n")
        for ele in grp_pairs:
            fp.write('('+str(ele[0]) +","+ str(ele[1])+') ')
        fp.write('\n')
    fp.close()

def write_flows(filename,aa):
    filename=filename.split('/')
    with open(filename[0]+'/flows_'+filename[1],'w') as fp:
        for k,v in aa.items():
            fp.write("//"+str(k)+" flows:\n")
            for ele in v:
                fp.write(ele+"\n")
    fp.close()

filename='traffic/full_rand_perm_UGAL_GOLI'
# filename='traffic/full_shift'

def perm_mixed(num_nodes,perm_percent):
    src=[i for i in range(num_nodes)]
    dest=[i for i in range(num_nodes)]
    random.shuffle(dest)
    random.shuffle(src)
    percent=perm_percent
    nodes_perm=int((num_nodes*percent)/100)
    for i in range(nodes_perm,num_nodes):
        dest[i]=-1
    return src,dest
write_direct_traffic_file('traffic/permmixed25', *perm_mixed(1056,25))
write_direct_traffic_file('traffic/permmixed50', *perm_mixed(1056,50))
write_direct_traffic_file('traffic/permmixed75', *perm_mixed(1056,75))

        
                   
    
def gen_tornado(num_nodes):
    src=[i for i in range(num_nodes)]
    dest=[(i+int((num_nodes-1)/2)) % num_nodes for i in range(num_nodes)]
    assert(len(set(dest)) == num_nodes )
    return src,dest
write_direct_traffic_file('traffic/33Gtornado', *gen_tornado(1056))


def gen_shuffle(num_nodes):
    src=[]
    dest=[]
    # for i in range(num_nodes):
        # shifted = i<<1
        # destnode = shifted & (num_nodes-1) | bool (shifted & num_nodes)
        # src.append(i)
        # dest.append(destnode)
    src=[i for i in range(num_nodes)]
    dest=[(i*2) % (num_nodes-1) for i in range(num_nodes)]
    dest[-1] = num_nodes-1
    assert(len(set(dest)) == num_nodes )
    return src,dest

write_direct_traffic_file('traffic/33Gshuffle',*gen_shuffle(1056))

def gen_transpose(num_nodes):
    n = num_nodes
    def transpose(first_node, nodes):
        sq_num= int(math.sqrt(nodes))
        src_dest_matrix= []
        
        for i in range(sq_num):
            temp=[(sq_num*i)+j for j in range(sq_num)]
            src_dest_matrix.append(temp)    
       
        src=[]
        dest=[]
        
        for i in range(sq_num):
            for j in range(sq_num):
                src.append(src_dest_matrix[i][j])
                dest.append(src_dest_matrix[j][i])
        return [first_node+ ele for ele in src],[first_node+ ele for ele in dest]
    
    src=[]
    dest=[]
    sq_list=[]
    c=0
    while(n>3):
        sq=int(math.sqrt(n))
        left = n- (sq**2)
        sq_list.append([ele+c for ele in range(sq**2)])
        c+=sq**2
        n=left
        
    for ele in sq_list:
        tsrc , tdest = transpose(ele[0],len(ele))
        src+= tsrc
        dest+= tdest
        
    for ele in range(sq_list[-1][-1], num_nodes):
        src.append(ele)
        dest.append(ele) 
    assert(len(set(dest)) == num_nodes )
    return src,dest
    
write_direct_traffic_file('traffic/33Gtranspose',*gen_shuffle(1056))


import random 
a=8
p=4
g=33
num_nodes=a*p*g
num_grps=g

max_min_flows=[]
for traffic_id in range(100):
    
    shift_nodes = random.sample(range(0, num_nodes),int(0.25*num_nodes))
    shift_nodes_dest = [(ele+(a*p))%num_nodes
                        for ele in shift_nodes]
    
    src=[ele for ele in range(num_nodes) if ele not in shift_nodes]
    # dest=[(ele+32)%1056 for ele in range(1056)]
    dest=[ele for ele in range(num_nodes) if ele not in shift_nodes_dest]   
    random.shuffle(dest)
    
    src+=shift_nodes
    dest+=shift_nodes_dest
    
    
    grp_grp_flows={}
    
    grp_flows=[0]*num_grps
    
    max_flow=0
    max_flow_grp_pairs=set()
    
    for ele in range(num_grps):
        grp_grp_flows[ele]=[0]*num_grps
        
    for s,d in zip(src,dest):
        src_grp=int(s/(a*p))
        dest_grp=int(d/(a*p))
        grp_flows=grp_grp_flows[dest_grp]
        grp_flows[src_grp]=grp_flows[src_grp]+1
        grp_grp_flows[dest_grp]=grp_flows
    
    for k,v in grp_grp_flows.items():
        max_flow=max(max_flow,max(v))
    max_min_flows.append(max_flow)
    
print(f'id:{traffic_id}->{np.mean(max_min_flows)}')
    
    
        
    aa={}
    bias=[0]*max_flow
    bias=[-300, 0, 30, 70, 120]
    for k,v in grp_grp_flows.items():
        for i,ele in enumerate(v):
            for fl in range(1,max_flow+1):
                if ele ==fl:
                    if fl not in aa:
                        aa[fl]=["0 500 "+str(i)+" "+str(k)+" "+str(bias[fl-1])]
                    else:
                        aa[fl].append("0 500 "+str(i)+" "+str(k)+" "+ str(bias[fl-1]))
    # for k,v in aa.items():
    #     print("//"+str(k)+" flows:")
    #     for ele in v:
    #         print(ele+"\n")
    
    write_flows(filename,aa)
    
                    # max_flow_grp_pairs.add((i,k))
    
    write_traffic_file(filename+"-"+str(traffic_id),src,dest,max_flow,max_flow_grp_pairs)
