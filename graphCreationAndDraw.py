#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Apr  3 13:32:09 2019

@author: rahman
"""

import time
import topologies as tp
import utilites as ut
import networkx as nx


def create_topology(a, g, arrangement, seed = 0):
    
    start_time = time.time()
    G, local_links, global_links = tp.build_drgonfly(a=a, p=a // 2, h=a // 2, gl_arrangmnt=arrangement, g=g, seed = seed)
    
    #    print("test printing the global links:")
    #    for idx, (link, props) in enumerate(global_links.items()):
    #        print(idx,link,props)
    #        
    #    print("test printing the local links:")
    #    for idx, (link, props) in enumerate(local_links.items()):
    #        print(idx,link, props)
    
    
    end_time = time.time()
    
    print("topology creation time:", end_time - start_time)
    
    if ut.validate_DF(G,global_links,local_links,a,g):
        print("Valid topology")
        validity = "Valid"
    else:
        print("Invalid topology")
        validity = "Invalid"
    
    return G
    
    pass

def draw_graph_circular(G, a = 1):
            
    colors = ['lightsteelblue', 'brown','cyan','mediumseagreen','khaki','magenta', 'lightgreen', 'slategray','coral', 'brown', 'gold', 'lightpink', ]
    
    node_colors = [colors[(x//a)%len(colors)] for x in G.nodes]
    
    edge_colors = [colors[edge[2]["w"]] for edge in G.edges(data=True)]
    
    options = {
        "node_color" : node_colors,
        "width" : 1,
        "edge_color" : edge_colors,
        "with_labels": True,
        "node_size" : 600
    }
    
    
    #nx.draw_circular(G, **options)
    pos = nx.circular_layout(G) 
    
    nx.draw(G, pos = pos , **options)
    
    #edge_labels = nx.get_edge_attributes(G,"w")
    #nx.draw_networkx_edge_labels(G, pos = pos, edge_labels = edge_labels)
        

    #plt.show()
    pass

if __name__ == "__main__":
    print("hello world!")
    G = create_topology(a = 8, g = 9, arrangement = "absolute_improved")
    draw_graph_circular(G, a = 5)

